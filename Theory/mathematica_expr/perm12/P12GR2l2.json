"(D1^4*Pk1*Pk2*(2*(2*beta10*f^2*k1^2*k2^2*(62*k1^4 + 369*k1^2*k2^2 + 56*k2^4) + 28*b1^2*(beta10*(8*k1^6*k2^2 + 43*k1^4*k2^4 + 5*k1^2*k2^6) + 2*(2*(beta8 + 2*beta9)*k1^2*k2^2 + f*gr2*(k1^2 + k2^2)^2)*k3^4) + k3^2*(28*(-2*b2 + g2)*gr1^2*k1^3*k2^3*k3^2 + 2*f^3*gr2*(20*k1^4 + 33*k1^2*k2^2 + 15*k2^4)*k3^2 - f*gr1*k1*k2*(2*(73 + 12*C)*gr1*k1^4*k2^2 + (137 + 15*C)*gr1*k1^2*k2^4 - beta19*k1*k2*(37*k1^3 + (109 + 24*C)*k1^2*k2 + 5*(20 + 3*C)*k1*k2^2 + 37*k2^3) + 2*(10*beta17*(4*k1^3 + 3*k2^3) + beta14*(48*k1^3 + 39*k2^3) + k1*k2*(37*beta15*(k1 + k2) + 33*beta18*(k1 + k2) + beta16*(39*k1 + 48*k2)))*k3^2) + f^2*(gr2*(48*k1^6 + 2*(133 + 24*C)*k1^4*k2^2 + 10*(23 + 3*C)*k1^2*k2^4 + 30*k2^6) + k1^2*k2^2*(37*beta6*(k1^2 + k2^2) + 37*beta7*(k1^2 + k2^2) + 2*(37*beta11 + 33*(beta8 + 2*beta9 - gr1^2*k1*k2))*k3^2))) + b1*(2*beta10*f*k1^2*k2^2*(170*k1^4 + 961*k1^2*k2^2 + 134*k2^4) + k3^2*(6*f^2*gr2*(16*k1^4 + 29*k1^2*k2^2 + 13*k2^4)*k3^2 - gr1*k1*k2*(-7*beta19*k1*k2*(8*k1^3 + (17 + 4*C)*k1^2*k2 + 4*(5 + C)*k1*k2^2 + 5*k2^3) + 2*(56*beta14*(k1^3 + k2^3) + beta17*(48*k1^3 + 39*k2^3) + k1*k2*(48*beta18*k1 + 39*beta18*k2 + 49*gr1*k1*k2 + 7*gr1*K*k1*k2 + 56*beta16*(k1 + k2) + 7*beta15*(8*k1 + 5*k2)))*k3^2) + f*(k1^2*k2^2*(91*beta6*(k1^2 + k2^2) + 91*beta7*(k1^2 + k2^2) + (182*beta11 + 87*(2*beta8 + 4*beta9 - gr1^2*k1*k2))*k3^2) + 7*gr2*(k1^2 + k2^2)*(8*k1^4 + 5*k2^2*(k2^2 + k3^2) + k1^2*((37 + 8*C)*k2^2 + 8*k3^2))))))*Cos[theta] + k2*(2*k1*(14*b1^2*(beta10*(20*k1^4*k2^2 + 38*k1^2*k2^4) + 3*(2*(beta13 + beta9)*k2^2 + f*gr2*(k1^2 + k2^2))*k3^4) + f*(11*beta10*f*k1^2*k2^2*(28*k1^2 + 29*k2^2) + 2*k3^2*(-12*gr1^2*k1^5*k2 - 72*gr1^2*k1^3*k2^3 + 4*C*gr1^2*k1^3*k2^3 - 12*gr1^2*k1*k2^5 + 2*beta19*gr1*k1*k2*(k1 + k2)*(6*k1^2 - (-12 + C)*k1*k2 + 6*k2^2) + 28*g2*gr2*k1^2*k3^2 - 22*beta14*gr1*k1^3*k3^2 - 18*beta17*gr1*k1^3*k3^2 - 24*beta15*gr1*k1^2*k2*k3^2 - 22*beta16*gr1*k1^2*k2*k3^2 - 18*beta18*gr1*k1^2*k2*k3^2 + 21*b2*gr2*k2^2*k3^2 - 14*g2*gr2*k2^2*k3^2 - 24*beta15*gr1*k1*k2^2*k3^2 - 22*beta16*gr1*k1*k2^2*k3^2 - 20*beta18*gr1*k1*k2^2*k3^2 - 22*beta14*gr1*k2^3*k3^2 - 20*beta17*gr1*k2^3*k3^2 + 2*f^2*gr2*(9*k1^2 + 10*k2^2)*k3^2 + f*(24*beta7*k1^2*k2^2 - 2*beta7*C*k1^2*k2^2 - beta6*(-23 + K)*k1^2*k2^2 + gr2*(-24*(-2 + C)*k1^4 - 4*(-24 + C)*k1^2*k2^2 + 12*(4 + C)*k2^4) + 22*beta12*k1^2*k3^2 + 18*beta13*k1^2*k3^2 + 18*beta9*k1^2*k3^2 - 9*gr1^2*k1^3*k2*k3^2 + 22*beta12*k2^2*k3^2 + 20*beta13*k2^2*k3^2 + 20*beta9*k2^2*k3^2 - 10*gr1^2*k1*k2^3*k3^2))) + 2*b1*(18*beta10*f*k1^2*k2^2*(17*k1^2 + 23*k2^2) + k3^2*(3*f^2*gr2*(11*k1^2 + 17*k2^2)*k3^2 - 2*gr1*k2*(-7*beta19*k1*(k1^3 + (3 - 2*C)*k1^2*k2 + (3 + C)*k1*k2^2 + k2^3) + (21*beta16*k1^2 + 11*beta18*k1^2 + 7*gr1*k1^3 + 11*beta18*k1*k2 + 21*beta14*k2^2 + 18*beta17*k2^2 + 7*gr1*k1*k2^2 + 14*beta15*k1*(k1 + k2))*k3^2) + f*(56*beta7*k1^2*k2^2 - 14*beta7*C*k1^2*k2^2 - 7*beta6*(-7 + K)*k1^2*k2^2 + 42*beta12*k1^2*k3^2 + 22*beta13*k1^2*k3^2 + 22*beta9*k1^2*k3^2 - 11*gr1^2*k1^3*k2*k3^2 + 42*beta12*k2^2*k3^2 + 58*beta13*k2^2*k3^2 + 58*beta9*k2^2*k3^2 - 11*gr1^2*k1*k2^3*k3^2 - 7*gr2*(4*(-2 + C)*k1^4 + 2*k1^2*((-8 + C)*k2^2 + (-1 + K)*k3^2) - k2^2*(2*(4 + C)*k2^2 + (5 + K)*k3^2))))))*Cos[2*theta] + k2*(56*b1^2*beta10*k1^2*k2^2*(5*k1^2 + 3*k2^2) + 2*beta10*f^2*k1^2*(36*k1^4 + 211*k1^2*k2^2 + 44*k2^4) + k3^2*(140*f^2*gr2*k1^4 - 96*C*f^2*gr2*k1^4 + 22*beta19*f*gr1*k1^5 + 70*beta19*f*gr1*k1^4*k2 - 48*beta19*C*f*gr1*k1^4*k2 - 92*f*gr1^2*k1^5*k2 + 48*C*f*gr1^2*k1^5*k2 + 194*f^2*gr2*k1^2*k2^2 - 42*C*f^2*gr2*k1^2*k2^2 + 79*beta19*f*gr1*k1^3*k2^2 - 21*beta19*C*f*gr1*k1^3*k2^2 + 22*beta19*f*gr1*k1^2*k2^3 - 101*f*gr1^2*k1^3*k2^3 + 21*C*f*gr1^2*k1^3*k2^3 + 36*f^2*gr2*k2^4 + 22*beta6*f^2*k1^2*(k1^2 + k2^2) + 22*beta7*f^2*k1^2*(k1^2 + k2^2) + 44*beta11*f^2*k1^2*k3^2 + 28*beta8*f^2*k1^2*k3^2 + 56*beta9*f^2*k1^2*k3^2 + 28*f^3*gr2*k1^2*k3^2 - 44*beta15*f*gr1*k1^3*k3^2 - 36*beta16*f*gr1*k1^3*k3^2 - 28*beta18*f*gr1*k1^3*k3^2 - 44*beta15*f*gr1*k1^2*k2*k3^2 - 28*beta18*f*gr1*k1^2*k2*k3^2 - 28*f^2*gr1^2*k1^3*k2*k3^2 - 56*g2*gr1^2*k1^3*k2*k3^2 + 20*f^3*gr2*k2^2*k3^2 - 36*beta14*f*gr1*k1*k2^2*k3^2 - 40*beta17*f*gr1*k1*k2^2*k3^2) + 2*b1*(beta10*f*k1^2*(44*k1^4 + 373*k1^2*k2^2 + 116*k2^4) + k3^2*(77*f*gr2*k1^4 - 56*C*f*gr2*k1^4 + 49*beta19*gr1*k1^4*k2 - 28*beta19*C*gr1*k1^4*k2 + 98*f*gr2*k1^2*k2^2 - 56*C*f*gr2*k1^2*k2^2 + 28*beta19*gr1*k1^3*k2^2 - 28*beta19*C*gr1*k1^3*k2^2 + 21*beta19*gr1*k1^2*k2^3 + 21*f*gr2*k2^4 + 21*beta6*f*k1^2*(k1^2 + k2^2) + 21*beta7*f*k1^2*(k1^2 + k2^2) + 42*beta11*f*k1^2*k3^2 + 18*beta8*f*k1^2*k3^2 + 36*beta9*f*k1^2*k3^2 + 21*f*gr2*k1^2*k3^2 + 18*f^2*gr2*k1^2*k3^2 - 42*beta15*gr1*k1^2*k2*k3^2 - 18*beta18*gr1*k1^2*k2*k3^2 - 14*gr1^2*k1^3*k2*k3^2 - 9*f*gr1^2*k1^3*k2*k3^2 + 14*gr1^2*K*k1^3*k2*k3^2 + 21*f*gr2*k2^2*k3^2 + 18*f^2*gr2*k2^2*k3^2 - 18*beta17*gr1*k1*k2^2*k3^2)))*Cos[3*theta] + k1*(1232*b1^2*beta10*k1^4*k2^2 + 1754*b1*beta10*f*k1^4*k2^2 + 590*beta10*f^2*k1^4*k2^2 + 686*b1^2*beta10*k1^2*k2^4 + 1286*b1*beta10*f*k1^2*k2^4 + 536*beta10*f^2*k1^2*k2^4 + 224*b1*f*gr2*k1^4*k3^2 + 112*b1*C*f*gr2*k1^4*k3^2 + 192*f^2*gr2*k1^4*k3^2 + 96*C*f^2*gr2*k1^4*k3^2 + 56*b1*beta19*gr1*k1^4*k2*k3^2 + 48*beta19*f*gr1*k1^4*k2*k3^2 - 48*f*gr1^2*k1^5*k2*k3^2 + 231*b1*beta6*f*k1^2*k2^2*k3^2 + 182*b1*beta7*f*k1^2*k2^2*k3^2 + 98*b1*beta7*C*f*k1^2*k2^2*k3^2 + 89*beta6*f^2*k1^2*k2^2*k3^2 + 74*beta7*f^2*k1^2*k2^2*k3^2 + 30*beta7*C*f^2*k1^2*k2^2*k3^2 + 406*b1*f*gr2*k1^2*k2^2*k3^2 + 98*b1*C*f*gr2*k1^2*k2^2*k3^2 + 322*f^2*gr2*k1^2*k2^2*k3^2 + 60*C*f^2*gr2*k1^2*k2^2*k3^2 + 49*b1*beta6*f*K*k1^2*k2^2*k3^2 + 15*beta6*f^2*K*k1^2*k2^2*k3^2 + 168*b1*beta19*gr1*k1^3*k2^2*k3^2 + 112*b1*beta19*C*gr1*k1^3*k2^2*k3^2 + 113*beta19*f*gr1*k1^3*k2^2*k3^2 + 30*beta19*C*f*gr1*k1^3*k2^2*k3^2 + 126*b1*beta19*gr1*k1^2*k2^3*k3^2 - 14*b1*beta19*C*gr1*k1^2*k2^3*k3^2 + 122*beta19*f*gr1*k1^2*k2^3*k3^2 + 30*beta19*C*f*gr1*k1^2*k2^3*k3^2 - 235*f*gr1^2*k1^3*k2^3*k3^2 - 60*C*f*gr1^2*k1^3*k2^3*k3^2 + 182*b1*f*gr2*k2^4*k3^2 - 14*b1*C*f*gr2*k2^4*k3^2 + 138*f^2*gr2*k2^4*k3^2 - 12*C*f^2*gr2*k2^4*k3^2 + 56*b1*beta19*gr1*k1*k2^4*k3^2 + 39*beta19*f*gr1*k1*k2^4*k3^2 - 39*f*gr1^2*k1*k2^5*k3^2 + 224*b1^2*beta13*k1^2*k3^4 + 224*b1^2*beta9*k1^2*k3^4 + 280*b1*beta12*f*k1^2*k3^4 + 296*b1*beta13*f*k1^2*k3^4 + 296*b1*beta9*f*k1^2*k3^4 + 104*beta12*f^2*k1^2*k3^4 + 88*beta13*f^2*k1^2*k3^4 + 88*beta9*f^2*k1^2*k3^4 + 168*b1*f*gr2*k1^2*k3^4 + 140*b1^2*f*gr2*k1^2*k3^4 + 112*b2*f*gr2*k1^2*k3^4 + 252*b1*f^2*gr2*k1^2*k3^4 + 88*f^3*gr2*k1^2*k3^4 - 112*f*g2*gr2*k1^2*k3^4 + 56*b1*f*gr2*K*k1^2*k3^4 - 224*b1*beta14*gr1*k1^3*k3^4 - 192*b1*beta17*gr1*k1^3*k3^4 - 104*beta14*f*gr1*k1^3*k3^4 - 88*beta17*f*gr1*k1^3*k3^4 - 112*b1*beta15*gr1*k1^2*k2*k3^4 - 56*b1*beta16*gr1*k1^2*k2*k3^4 - 104*b1*beta18*gr1*k1^2*k2*k3^4 - 96*beta15*f*gr1*k1^2*k2*k3^4 - 104*beta16*f*gr1*k1^2*k2*k3^4 - 88*beta18*f*gr1*k1^2*k2*k3^4 - 56*b1*gr1^2*k1^3*k2*k3^4 - 52*b1*f*gr1^2*k1^3*k2*k3^4 - 44*f^2*gr1^2*k1^3*k2*k3^4 + 56*b1^2*beta13*k2^2*k3^4 + 56*b1^2*beta9*k2^2*k3^4 + 280*b1*beta12*f*k2^2*k3^4 + 152*b1*beta13*f*k2^2*k3^4 + 152*b1*beta9*f*k2^2*k3^4 + 104*beta12*f^2*k2^2*k3^4 + 72*beta13*f^2*k2^2*k3^4 + 72*beta9*f^2*k2^2*k3^4 + 63*b1*f*gr2*k2^2*k3^4 + 140*b1^2*f*gr2*k2^2*k3^4 + 28*b2*f*gr2*k2^2*k3^4 + 180*b1*f^2*gr2*k2^2*k3^4 + 72*f^3*gr2*k2^2*k3^4 + 14*f*g2*gr2*k2^2*k3^4 - 7*b1*f*gr2*K*k2^2*k3^4 - 112*b1*beta15*gr1*k1*k2^2*k3^4 - 224*b1*beta16*gr1*k1*k2^2*k3^4 - 104*b1*beta18*gr1*k1*k2^2*k3^4 - 78*beta15*f*gr1*k1*k2^2*k3^4 - 104*beta16*f*gr1*k1*k2^2*k3^4 - 72*beta18*f*gr1*k1*k2^2*k3^4 - 56*b1*beta14*gr1*k2^3*k3^4 - 48*b1*beta17*gr1*k2^3*k3^4 - 104*beta14*f*gr1*k2^3*k3^4 - 72*beta17*f*gr1*k2^3*k3^4 - 56*b1*gr1^2*k1*k2^3*k3^4 - 52*b1*f*gr1^2*k1*k2^3*k3^4 - 36*f^2*gr1^2*k1*k2^3*k3^4 + k2^2*(42*b1^2*beta10*k1^2*k2^2 + 2*beta10*f^2*k1^2*(37*k1^2 + 52*k2^2) + 2*b1*beta10*f*k1^2*(47*k1^2 + 65*k2^2) - 21*b1*k3^2*(2*beta7*(-1 + C)*f*k1^2 - 2*f*gr2*k1^2 + 2*C*f*gr2*k1^2 + beta6*f*(-1 + K)*k1^2 - 2*beta19*gr1*k1^2*k2 + 2*beta19*C*gr1*k1^2*k2 - 2*f*gr2*k2^2 + 2*C*f*gr2*k2^2 - f*gr2*k3^2 + f*gr2*K*k3^2) + f*k3^2*(-22*beta7*(-1 + C)*f*k1^2 + 62*f*gr2*k1^2 - 44*C*f*gr2*k1^2 - 11*beta6*f*(-1 + K)*k1^2 + 31*beta19*gr1*k1^3 - 22*beta19*C*gr1*k1^3 + 22*beta19*gr1*k1^2*k2 - 22*beta19*C*gr1*k1^2*k2 - 53*gr1^2*k1^3*k2 + 44*C*gr1^2*k1^3*k2 + 54*f*gr2*k2^2 - 36*C*f*gr2*k2^2 + 9*beta19*gr1*k1*k2^2 - 9*gr1^2*k1*k2^3 + 8*beta13*f*k3^2 + 8*beta9*f*k3^2 + 8*f^2*gr2*k3^2 + 42*g2*gr2*k3^2 - 18*beta15*gr1*k1*k3^2 - 8*beta18*gr1*k1*k3^2 - 8*beta17*gr1*k2*k3^2 - 4*f*gr1^2*k1*k2*k3^2))*Cos[4*theta] + f*k1*k2^3*(18*b1*beta10*k1^2 + beta10*f*(22*k1^2 + 8*k2^2) - 9*(-1 + C)*(2*f*gr2 + gr1*k1*(beta19 - gr1*k2))*k3^2)*Cos[5*theta] + 2*beta10*f^2*k1^2*k2^4*Cos[6*theta]))))\/(168*k1^3*k2^3*k3^4)"