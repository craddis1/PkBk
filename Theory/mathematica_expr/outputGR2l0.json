"(D1^4*Pk1*Pk3*(-3*f*k2^3*(-28*b1*beta10*k1^2*(k1^2 - k3^2) - 20*beta10*f*k1^2*(k1^2 - k3^2) + k2^2*(5*f^2*gr2*k2^2 + 2*gr1*k1*(-7*beta19*(-1 + C)*k1^2 - 5*beta17*k2^2 + 7*(-1 + C)*gr1*k1^2*k3) + 7*f*gr2*((-7 + 8*C)*k1^2 + k3^2)))*Cos[theta]^5 + 6*f*k1*k2^4*(7*b1*beta10*k1^2 + 5*beta10*f*k1^2 - 7*(-1 + C)*f*gr2*k2^2)*Cos[theta]^6 + k1*k2^2*Cos[theta]^4*(70*b1^2*beta10*k1^2*k3^2 - 7*b1*(10*beta7*(-1 + C)*f*k1^2*k2^2 - 10*f*gr2*k1^2*k2^2 + 10*C*f*gr2*k1^2*k2^2 + 5*beta6*f*(-1 + K)*k1^2*k2^2 - 6*beta13*f*k2^4 - 6*beta9*f*k2^4 - 5*f*gr2*k2^4 - 3*f^2*gr2*k2^4 + 5*f*gr2*K*k2^4 - 10*beta19*gr1*k1^2*k2^2*k3 + 10*beta19*C*gr1*k1^2*k2^2*k3 + 6*beta17*gr1*k2^4*k3 + 12*beta10*f*k1^2*k3^2 - 10*f*gr2*k2^2*k3^2 + 10*C*f*gr2*k2^2*k3^2) - f*(42*beta7*(-1 + C)*f*k1^2*k2^2 - 231*f*gr2*k1^2*k2^2 + 294*C*f*gr2*k1^2*k2^2 + 21*beta6*f*(-1 + K)*k1^2*k2^2 + 147*beta19*gr1*k1^3*k2^2 - 168*beta19*C*gr1*k1^3*k2^2 - 30*beta13*f*k2^4 - 30*beta9*f*k2^4 + 45*f^2*gr2*k2^4 - 70*g2*gr2*k2^4 + 42*beta15*gr1*k1*k2^4 - 150*beta17*gr1*k1*k2^4 + 30*beta18*gr1*k1*k2^4 - 42*beta19*gr1*k1^2*k2^2*k3 + 42*beta19*C*gr1*k1^2*k2^2*k3 - 105*gr1^2*k1^3*k2^2*k3 + 126*C*gr1^2*k1^3*k2^2*k3 + 30*beta17*gr1*k2^4*k3 + 15*f*gr1^2*k1*k2^4*k3 + 90*beta10*f*k1^2*k3^2 + 63*f*gr2*k2^2*k3^2 - 42*C*f*gr2*k2^2*k3^2 - 21*beta19*gr1*k1*k2^2*k3^2 + 21*gr1^2*k1*k2^2*k3^3) + 12*f*k2^2*(7*b1*beta10*k1^2 + 3*beta10*f*k1^2 - 7*(-1 + C)*f*gr2*k2^2)*Sin[theta]) - k2*Cos[theta]^3*(60*beta10*f^2*k1^6 + 140*b1^2*beta10*k1^2*k3^4 + k1*k2^2*(-168*f^2*gr2*k1^3 + 252*C*f^2*gr2*k1^3 + 189*beta19*f*gr1*k1^4 - 252*beta19*C*f*gr1*k1^4 + 42*beta11*f^2*k1*k2^2 - 120*beta13*f^2*k1*k2^2 + 30*beta8*f^2*k1*k2^2 - 60*beta9*f^2*k1*k2^2 + 60*f^3*gr2*k1*k2^2 - 280*f*g2*gr2*k1*k2^2 + 126*beta15*f*gr1*k1^2*k2^2 - 42*beta16*f*gr1*k1^2*k2^2 - 300*beta17*f*gr1*k1^2*k2^2 + 90*beta18*f*gr1*k1^2*k2^2 - 105*beta19*f*gr1*k1^3*k3 + 126*beta19*C*f*gr1*k1^3*k3 - 84*f*gr1^2*k1^4*k3 + 126*C*f*gr1^2*k1^4*k3 - 42*beta15*f*gr1*k1*k2^2*k3 + 120*beta17*f*gr1*k1*k2^2*k3 - 30*beta18*f*gr1*k1*k2^2*k3 + 30*f^2*gr1^2*k1^2*k2^2*k3 - 70*g2*gr1^2*k1^2*k2^2*k3 + 84*f^2*gr2*k1*k3^2 - 84*C*f^2*gr2*k1*k3^2 - 63*beta19*f*gr1*k1^2*k3^2 + 42*beta19*C*f*gr1*k1^2*k3^2 - 42*beta14*f*gr1*k2^2*k3^2 + 21*beta19*f*gr1*k1*k3^3 + 42*f*gr1^2*k1^2*k3^3 - 42*C*f*gr1^2*k1^2*k3^3 + 21*beta7*f^2*k1*((-7 + 8*C)*k1^2 + k3^2) + 21*beta6*f^2*k1*((-3 + 4*K)*k1^2 + k3^2)) + 7*b1*(12*beta10*f*k1^2*(k1^4 + k3^4) + k2^2*(-15*f*gr2*k1^4 + 20*C*f*gr2*k1^4 + 10*beta11*f*k1^2*k2^2 - 24*beta13*f*k1^2*k2^2 + 6*beta8*f*k1^2*k2^2 - 12*beta9*f*k1^2*k2^2 - 15*f*gr2*k1^2*k2^2 - 6*f^2*gr2*k1^2*k2^2 + 20*f*gr2*K*k1^2*k2^2 - 25*beta19*gr1*k1^4*k3 + 30*beta19*C*gr1*k1^4*k3 - 10*beta15*gr1*k1^2*k2^2*k3 + 24*beta17*gr1*k1^2*k2^2*k3 - 6*beta18*gr1*k1^2*k2^2*k3 - 5*gr1^2*k1^3*k2^2*k3 - 3*f*gr1^2*k1^3*k2^2*k3 + 5*gr1^2*K*k1^3*k2^2*k3 - 10*f*gr2*k1^2*k3^2 + 20*C*f*gr2*k1^2*k3^2 + 10*beta19*gr1*k1^3*k3^2 - 10*beta19*C*gr1*k1^3*k3^2 + 5*f*gr2*k2^2*k3^2 + 6*f^2*gr2*k2^2*k3^2 - 6*beta17*gr1*k1*k2^2*k3^2 + 5*beta19*gr1*k1^2*k3^3 + 5*f*gr2*k3^4 + 5*beta7*f*k1^2*((-7 + 8*C)*k1^2 + k3^2) + 5*beta6*f*k1^2*((-3 + 4*K)*k1^2 + k3^2))) + 6*f*k2^2*(-14*b1*beta10*k1^2*(k1^2 - 2*k3^2) - 6*beta10*f*k1^2*(k1^2 - 2*k3^2) + k2^2*(5*f^2*gr2*k2^2 + gr1*k1*(-7*beta19*(-1 + C)*k1^2 - 10*beta17*k2^2 + 7*(-1 + C)*gr1*k1^2*k3) + 7*f*gr2*((-5 + 6*C)*k1^2 + k3^2)))*Sin[theta]) - k1*Cos[theta]^2*(42*b1*beta10*f*k1^6 + 30*beta10*f^2*k1^6 - 105*b1*beta6*f*k1^4*k2^2 - 315*b1*beta7*f*k1^4*k2^2 + 420*b1*beta7*C*f*k1^4*k2^2 - 63*beta6*f^2*k1^4*k2^2 - 189*beta7*f^2*k1^4*k2^2 + 252*beta7*C*f^2*k1^4*k2^2 - 35*b1*f*gr2*k1^4*k2^2 + 70*b1*C*f*gr2*k1^4*k2^2 - 42*f^2*gr2*k1^4*k2^2 + 84*C*f^2*gr2*k1^4*k2^2 + 210*b1*beta6*f*K*k1^4*k2^2 + 126*beta6*f^2*K*k1^4*k2^2 + 105*beta19*f*gr1*k1^5*k2^2 - 168*beta19*C*f*gr1*k1^5*k2^2 - 21*b1*beta10*f*k1^2*k2^4 + 210*b1*beta11*f*k1^2*k2^4 - 70*b1*beta12*f*k1^2*k2^4 - 294*b1*beta13*f*k1^2*k2^4 + 126*b1*beta8*f*k1^2*k2^4 - 42*b1*beta9*f*k1^2*k2^4 - 3*beta10*f^2*k1^2*k2^4 + 126*beta11*f^2*k1^2*k2^4 - 42*beta12*f^2*k1^2*k2^4 - 210*beta13*f^2*k1^2*k2^4 + 90*beta8*f^2*k1^2*k2^4 - 30*beta9*f^2*k1^2*k2^4 - 105*b1^2*gr2*k1^2*k2^4 - 140*b1*f*gr2*k1^2*k2^4 - 35*b1^2*f*gr2*k1^2*k2^4 - 63*b1*f^2*gr2*k1^2*k2^4 + 30*f^3*gr2*k1^2*k2^4 - 210*b1*g2*gr2*k1^2*k2^4 - 490*f*g2*gr2*k1^2*k2^4 + 105*b1^2*gr2*K*k1^2*k2^4 + 245*b1*f*gr2*K*k1^2*k2^4 + 42*beta14*f*gr1*k1^3*k2^4 + 126*beta15*f*gr1*k1^3*k2^4 - 126*beta16*f*gr1*k1^3*k2^4 - 270*beta17*f*gr1*k1^3*k2^4 + 90*beta18*f*gr1*k1^3*k2^4 - 21*f^2*gr2*k2^6 + 21*C*f^2*gr2*k2^6 - 140*b1*beta19*gr1*k1^4*k2^2*k3 + 210*b1*beta19*C*gr1*k1^4*k2^2*k3 - 84*beta19*f*gr1*k1^4*k2^2*k3 + 126*beta19*C*f*gr1*k1^4*k2^2*k3 - 21*f*gr1^2*k1^5*k2^2*k3 + 42*C*f*gr1^2*k1^5*k2^2*k3 - 140*b1*beta15*gr1*k1^2*k2^4*k3 + 70*b1*beta16*gr1*k1^2*k2^4*k3 + 252*b1*beta17*gr1*k1^2*k2^4*k3 - 84*b1*beta18*gr1*k1^2*k2^4*k3 - 84*beta15*f*gr1*k1^2*k2^4*k3 + 42*beta16*f*gr1*k1^2*k2^4*k3 + 180*beta17*f*gr1*k1^2*k2^4*k3 - 60*beta18*f*gr1*k1^2*k2^4*k3 - 70*b1*gr1^2*k1^3*k2^4*k3 - 42*b1*f*gr1^2*k1^3*k2^4*k3 + 15*f^2*gr1^2*k1^3*k2^4*k3 - 210*g2*gr1^2*k1^3*k2^4*k3 + 105*b1*gr1^2*K*k1^3*k2^4*k3 + 70*b1^2*beta10*k1^4*k3^2 - 30*beta10*f^2*k1^4*k3^2 - 105*b1^2*beta6*k1^2*k2^2*k3^2 - 210*b1^2*beta7*k1^2*k2^2*k3^2 + 210*b1^2*beta7*C*k1^2*k2^2*k3^2 + 35*b1*beta6*f*k1^2*k2^2*k3^2 + 35*b1*beta7*f*k1^2*k2^2*k3^2 + 42*beta6*f^2*k1^2*k2^2*k3^2 + 63*beta7*f^2*k1^2*k2^2*k3^2 - 42*beta7*C*f^2*k1^2*k2^2*k3^2 + 42*f^2*gr2*k1^2*k2^2*k3^2 - 84*C*f^2*gr2*k1^2*k2^2*k3^2 + 105*b1^2*beta6*K*k1^2*k2^2*k3^2 - 21*beta6*f^2*K*k1^2*k2^2*k3^2 + 105*b1*beta19*gr1*k1^3*k2^2*k3^2 - 140*b1*beta19*C*gr1*k1^3*k2^2*k3^2 - 63*beta19*f*gr1*k1^3*k2^2*k3^2 + 84*beta19*C*f*gr1*k1^3*k2^2*k3^2 - 70*b1^2*beta13*k2^4*k3^2 - 70*b1^2*beta9*k2^4*k3^2 - 70*b1*beta12*f*k2^4*k3^2 - 42*b1*beta13*f*k2^4*k3^2 - 42*b1*beta9*f*k2^4*k3^2 - 42*beta12*f^2*k2^4*k3^2 - 105*b1^2*gr2*k2^4*k3^2 + 70*b1*f*gr2*k2^4*k3^2 - 35*b1^2*f*gr2*k2^4*k3^2 - 35*b2*f*gr2*k2^4*k3^2 + 63*b1*f^2*gr2*k2^4*k3^2 - 210*b1*g2*gr2*k2^4*k3^2 + 70*f*g2*gr2*k2^4*k3^2 + 105*b1^2*gr2*K*k2^4*k3^2 - 35*b1*f*gr2*K*k2^4*k3^2 + 70*b1*beta15*gr1*k1*k2^4*k3^2 - 126*b1*beta17*gr1*k1*k2^4*k3^2 + 42*b1*beta18*gr1*k1*k2^4*k3^2 - 126*beta14*f*gr1*k1*k2^4*k3^2 + 42*beta16*f*gr1*k1*k2^4*k3^2 + 70*b1*beta19*gr1*k1^2*k2^2*k3^3 - 70*b1*beta19*C*gr1*k1^2*k2^2*k3^3 + 42*beta19*f*gr1*k1^2*k2^2*k3^3 - 42*beta19*C*f*gr1*k1^2*k2^2*k3^3 + 21*f*gr1^2*k1^3*k2^2*k3^3 - 42*C*f*gr1^2*k1^3*k2^2*k3^3 + 70*b1*beta14*gr1*k2^4*k3^3 + 42*beta14*f*gr1*k2^4*k3^3 + 35*b1*gr1^2*k1*k2^4*k3^3 + 21*b1*f*gr1^2*k1*k2^4*k3^3 - 70*b1^2*beta10*k1^2*k3^4 - 42*b1*beta10*f*k1^2*k3^4 + 35*b1*f*gr2*k2^2*k3^4 - 70*b1*C*f*gr2*k2^2*k3^4 - 35*b1*beta19*gr1*k1*k2^2*k3^4 + 3*f*k2^4*(7*b1*beta10*k1^2 + beta10*f*k1^2 - 7*(-1 + C)*f*gr2*k2^2)*Cos[2*theta] - k2^2*(70*b1^2*beta10*k1^2*k3^2 - 70*b1*beta10*f*k1^2*(k1^2 + k3^2) + 7*b1*k2^2*(-10*beta7*(-1 + C)*f*k1^2 + 10*f*gr2*k1^2 - 10*C*f*gr2*k1^2 - 5*beta6*f*(-1 + K)*k1^2 + 12*beta13*f*k2^2 + 12*beta9*f*k2^2 + 5*f*gr2*k2^2 + 6*f^2*gr2*k2^2 - 5*f*gr2*K*k2^2 + 10*beta19*gr1*k1^2*k3 - 10*beta19*C*gr1*k1^2*k3 - 12*beta17*gr1*k2^2*k3 + 10*f*gr2*k3^2 - 10*C*f*gr2*k3^2) - f*(6*beta10*f*k1^2*(5*k1^2 + 6*k3^2) + k2^2*(14*beta7*(-1 + C)*f*k1^2 - 196*f*gr2*k1^2 + 280*C*f*gr2*k1^2 + 7*beta6*f*(-1 + K)*k1^2 + 91*beta19*gr1*k1^3 - 112*beta19*C*gr1*k1^3 - 36*beta13*f*k2^2 - 36*beta9*f*k2^2 + 54*f^2*gr2*k2^2 - 70*g2*gr2*k2^2 + 42*beta15*gr1*k1*k2^2 - 180*beta17*gr1*k1*k2^2 + 36*beta18*gr1*k1*k2^2 - 14*beta19*gr1*k1^2*k3 + 14*beta19*C*gr1*k1^2*k3 - 77*gr1^2*k1^3*k3 + 98*C*gr1^2*k1^3*k3 + 36*beta17*gr1*k2^2*k3 + 18*f*gr1^2*k1*k2^2*k3 + 84*f*gr2*k3^2 - 84*C*f*gr2*k3^2 - 21*beta19*gr1*k1*k3^2 + 21*gr1^2*k1*k3^3)))*Sin[theta]) - k2*Cos[theta]*(-(k1^2*(-21*beta19*f*gr1*k1^5 + 42*beta19*C*f*gr1*k1^5 - 126*beta11*f^2*k1^2*k2^2 + 84*beta12*f^2*k1^2*k2^2 + 180*beta13*f^2*k1^2*k2^2 - 90*beta8*f^2*k1^2*k2^2 + 420*f*g2*gr2*k1^2*k2^2 - 84*beta14*f*gr1*k1^3*k2^2 - 42*beta15*f*gr1*k1^3*k2^2 + 126*beta16*f*gr1*k1^3*k2^2 + 90*beta17*f*gr1*k1^3*k2^2 - 30*beta18*f*gr1*k1^3*k2^2 + 21*beta19*f*gr1*k1^4*k3 - 42*beta19*C*f*gr1*k1^4*k3 + 42*beta14*f*gr1*k1^2*k2^2*k3 + 42*beta15*f*gr1*k1^2*k2^2*k3 - 84*beta16*f*gr1*k1^2*k2^2*k3 - 90*beta17*f*gr1*k1^2*k2^2*k3 + 30*beta18*f*gr1*k1^2*k2^2*k3 + 210*g2*gr1^2*k1^3*k2^2*k3 + 21*beta19*f*gr1*k1^3*k3^2 - 42*beta19*C*f*gr1*k1^3*k3^2 + 84*beta12*f^2*k2^2*k3^2 + 70*b2*f*gr2*k2^2*k3^2 - 140*f*g2*gr2*k2^2*k3^2 + 126*beta14*f*gr1*k1*k2^2*k3^2 - 84*beta16*f*gr1*k1*k2^2*k3^2 - 21*beta19*f*gr1*k1^2*k3^3 + 42*beta19*C*f*gr1*k1^2*k3^3 - 84*beta14*f*gr1*k2^2*k3^3 + 42*beta16*f*gr1*k2^2*k3^3 + 35*b2*gr1^2*k1*k2^2*k3^3 - 70*g2*gr1^2*k1*k2^2*k3^3 - 21*beta7*f^2*k1^2*((-5 + 8*C)*k1^2 + (3 - 4*C)*k3^2) - 21*beta6*f^2*k1^2*((-1 + 4*K)*k1^2 + (1 - 2*K)*k3^2))) + 7*b1*k1*(30*beta11*f*k1^3*k2^2 - 20*beta12*f*k1^3*k2^2 - 36*beta13*f*k1^3*k2^2 + 18*beta8*f*k1^3*k2^2 - 10*f*gr2*k1^3*k2^2 - 6*f^2*gr2*k1^3*k2^2 - 60*g2*gr2*k1^3*k2^2 + 30*f*gr2*K*k1^3*k2^2 - 5*beta19*gr1*k1^5*k3 + 10*beta19*C*gr1*k1^5*k3 - 10*beta14*gr1*k1^3*k2^2*k3 - 10*beta15*gr1*k1^3*k2^2*k3 + 20*beta16*gr1*k1^3*k2^2*k3 + 18*beta17*gr1*k1^3*k2^2*k3 - 6*beta18*gr1*k1^3*k2^2*k3 - 5*gr1^2*k1^4*k2^2*k3 - 3*f*gr1^2*k1^4*k2^2*k3 + 15*gr1^2*K*k1^4*k2^2*k3 + 5*beta19*gr1*k1^4*k3^2 - 10*beta19*C*gr1*k1^4*k3^2 + 10*beta11*f*k1*k2^2*k3^2 - 20*beta12*f*k1*k2^2*k3^2 - 12*beta13*f*k1*k2^2*k3^2 + 6*beta8*f*k1*k2^2*k3^2 + 10*f*gr2*k1*k2^2*k3^2 + 6*f^2*gr2*k1*k2^2*k3^2 - 60*g2*gr2*k1*k2^2*k3^2 - 10*f*gr2*K*k1*k2^2*k3^2 + 10*beta15*gr1*k1^2*k2^2*k3^2 - 10*beta16*gr1*k1^2*k2^2*k3^2 - 18*beta17*gr1*k1^2*k2^2*k3^2 + 6*beta18*gr1*k1^2*k2^2*k3^2 + 5*beta19*gr1*k1^3*k3^3 - 10*beta19*C*gr1*k1^3*k3^3 + 20*beta14*gr1*k1*k2^2*k3^3 - 10*beta16*gr1*k1*k2^2*k3^3 + 5*gr1^2*k1^2*k2^2*k3^3 + 3*f*gr1^2*k1^2*k2^2*k3^3 - 5*gr1^2*K*k1^2*k2^2*k3^3 - 5*beta19*gr1*k1^2*k3^4 + 10*beta19*C*gr1*k1^2*k3^4 - 10*beta14*gr1*k2^2*k3^4 + 5*beta7*f*k1*((-5 + 8*C)*k1^4 + k3^4) + 5*beta6*f*k1*((-1 + 4*K)*k1^4 + k3^4)) - 35*b1^2*(gr2*k2^2*(k1^2 + k3^2)*((3 + f - 6*K)*k1^2 - (3 + f)*k3^2) - k1^2*k3^2*(2*(3*beta11 - 2*beta13 + beta8)*k2^2 + 3*beta7*((-3 + 4*C)*k1^2 + k3^2) + 3*beta6*((-1 + 2*K)*k1^2 + k3^2))) + (12*beta10*f^2*k1^4*(3*k1^2 - 2*k3^2) + 28*b1*beta10*f*k1^2*(3*k1^4 - 2*k1^2*k3^2 + k3^4) + f*k1*k2^2*(-84*f*gr2*k1^3 + 63*beta19*gr1*k1^4 - 98*beta19*C*gr1*k1^4 - 72*beta13*f*k1*k2^2 - 36*beta9*f*k1*k2^2 + 36*f^2*gr2*k1*k2^2 + 70*beta15*gr1*k1^2*k2^2 - 42*beta16*gr1*k1^2*k2^2 + 54*beta18*gr1*k1^2*k2^2 - 21*beta19*gr1*k1^3*k3 + 28*beta19*C*gr1*k1^3*k3 - 42*gr1^2*k1^4*k3 + 70*C*gr1^2*k1^4*k3 + 72*beta17*gr1*k1*k2^2*k3 + 56*f*gr2*k1*k3^2 - 84*C*f*gr2*k1*k3^2 - 35*beta19*gr1*k1^2*k3^2 + 42*beta19*C*gr1*k1^2*k3^2 - 42*beta14*gr1*k2^2*k3^2 + 7*beta19*gr1*k1*k3^3 + 28*gr1^2*k1^2*k3^3 - 42*C*gr1^2*k1^2*k3^3 + 7*beta6*f*k1*(-k1^2 + k3^2) + 7*beta7*f*k1*((-3 + 4*C)*k1^2 + k3^2)) - 7*b1*k2^2*(15*f*gr2*k1^4 - 10*beta11*f*k1^2*k2^2 - 6*beta8*f*k1^2*k2^2 + 12*beta9*f*k1^2*k2^2 + 5*f*gr2*k1^2*k2^2 + 6*f^2*gr2*k1^2*k2^2 - 10*f*gr2*K*k1^2*k2^2 + 15*beta19*gr1*k1^4*k3 + 10*beta15*gr1*k1^2*k2^2*k3 + 6*beta18*gr1*k1^2*k2^2*k3 + 3*f*gr1^2*k1^3*k2^2*k3 + 10*f*gr2*k1^2*k3^2 - 5*f*gr2*k2^2*k3^2 - 6*f^2*gr2*k2^2*k3^2 + 6*beta17*gr1*k1*k2^2*k3^2 - 5*beta19*gr1*k1^2*k3^3 - 5*f*gr2*k3^4 + 5*beta7*f*k1^2*(3*k1^2 - k3^2) - 5*beta6*f*k1^2*((-1 + 2*K)*k1^2 + k3^2)))*Sin[theta] + 3*f*k2^2*(5*f^2*gr2*k2^4 + 7*f*gr2*k2^2*((-3 + 4*C)*k1^2 + k3^2) + 2*k1*(-5*beta17*gr1*k2^4 + 14*b1*beta10*k1*k3^2))*Sin[theta]^2) + k1*(35*b1*beta7*f*k1^6 - 70*b1*beta7*C*f*k1^6 + 21*beta7*f^2*k1^6 - 42*beta7*C*f^2*k1^6 - 35*b1*beta6*f*K*k1^6 - 21*beta6*f^2*K*k1^6 - 70*b1*beta11*f*k1^4*k2^2 + 70*b1*beta12*f*k1^4*k2^2 + 84*b1*beta13*f*k1^4*k2^2 - 42*b1*beta8*f*k1^4*k2^2 - 42*beta11*f^2*k1^4*k2^2 + 42*beta12*f^2*k1^4*k2^2 + 60*beta13*f^2*k1^4*k2^2 - 30*beta8*f^2*k1^4*k2^2 + 210*b1*g2*gr2*k1^4*k2^2 + 140*f*g2*gr2*k1^4*k2^2 - 105*b1^2*gr2*K*k1^4*k2^2 - 70*b1*f*gr2*K*k1^4*k2^2 - 42*beta14*f*gr1*k1^5*k2^2 + 42*beta16*f*gr1*k1^5*k2^2 + 70*b1*beta14*gr1*k1^4*k2^2*k3 - 70*b1*beta16*gr1*k1^4*k2^2*k3 + 42*beta14*f*gr1*k1^4*k2^2*k3 - 42*beta16*f*gr1*k1^4*k2^2*k3 + 70*g2*gr1^2*k1^5*k2^2*k3 - 35*b1*gr1^2*K*k1^5*k2^2*k3 + 105*b1^2*beta7*k1^4*k3^2 - 210*b1^2*beta7*C*k1^4*k3^2 - 21*beta7*f^2*k1^4*k3^2 + 42*beta7*C*f^2*k1^4*k3^2 - 105*b1^2*beta6*K*k1^4*k3^2 + 21*beta6*f^2*K*k1^4*k3^2 - 210*b1^2*beta11*k1^2*k2^2*k3^2 + 210*b1^2*beta12*k1^2*k2^2*k3^2 + 140*b1^2*beta13*k1^2*k2^2*k3^2 - 70*b1^2*beta8*k1^2*k2^2*k3^2 - 70*b1*beta11*f*k1^2*k2^2*k3^2 + 140*b1*beta12*f*k1^2*k2^2*k3^2 + 84*b1*beta13*f*k1^2*k2^2*k3^2 - 42*b1*beta8*f*k1^2*k2^2*k3^2 + 42*beta12*f^2*k1^2*k2^2*k3^2 + 105*b1*b2*gr2*k1^2*k2^2*k3^2 + 70*b2*f*gr2*k1^2*k2^2*k3^2 - 140*f*g2*gr2*k1^2*k2^2*k3^2 + 70*b1*f*gr2*K*k1^2*k2^2*k3^2 - 70*b1*beta14*gr1*k1^3*k2^2*k3^2 + 70*b1*beta16*gr1*k1^3*k2^2*k3^2 + 42*beta14*f*gr1*k1^3*k2^2*k3^2 - 42*beta16*f*gr1*k1^3*k2^2*k3^2 - 70*b1*beta14*gr1*k1^2*k2^2*k3^3 + 70*b1*beta16*gr1*k1^2*k2^2*k3^3 - 42*beta14*f*gr1*k1^2*k2^2*k3^3 + 42*beta16*f*gr1*k1^2*k2^2*k3^3 + 35*b2*gr1^2*k1^3*k2^2*k3^3 - 70*g2*gr1^2*k1^3*k2^2*k3^3 + 35*b1*gr1^2*K*k1^3*k2^2*k3^3 - 105*b1^2*beta7*k1^2*k3^4 + 210*b1^2*beta7*C*k1^2*k3^4 - 35*b1*beta7*f*k1^2*k3^4 + 70*b1*beta7*C*f*k1^2*k3^4 + 105*b1^2*beta6*K*k1^2*k3^4 + 35*b1*beta6*f*K*k1^2*k3^4 + 210*b1^2*beta12*k2^2*k3^4 + 70*b1*beta12*f*k2^2*k3^4 + 105*b1*b2*gr2*k2^2*k3^4 - 210*b1*g2*gr2*k2^2*k3^4 + 105*b1^2*gr2*K*k2^2*k3^4 + 70*b1*beta14*gr1*k1*k2^2*k3^4 - 70*b1*beta16*gr1*k1*k2^2*k3^4 + 3*k2^2*(7*b1*(k2^4*(2*beta13*f + 2*beta9*f + f^2*gr2 - 2*beta17*gr1*k3) + 2*beta10*f*k1^2*(-k1^2 + k3^2)) - f*(3*f^2*gr2*k2^4 + 2*beta10*f*k1^2*(k1^2 - k3^2) + 2*gr1*k2^4*(beta18*k1 + beta17*(-5*k1 + k3)) + f*k2^2*(k2^2*(-2*beta13 - 2*beta9 + gr1^2*k1*k3) + 7*(-1 + 2*C)*gr2*(k1^2 - k3^2))))*Sin[theta]^2 - 70*b1*beta7*C*f*k1^3*k2^3*Sin[2*theta] - 70*b1*C*f*gr2*k1^3*k2^3*Sin[2*theta] - 70*C*f^2*gr2*k1^3*k2^3*Sin[2*theta] - 7*beta6*f^2*K*k1^3*k2^3*Sin[2*theta] + 84*b1*beta13*f*k1*k2^5*Sin[2*theta] - 7*beta11*f^2*k1*k2^5*Sin[2*theta] - 9*beta8*f^2*k1*k2^5*Sin[2*theta] + 70*f*g2*gr2*k1*k2^5*Sin[2*theta] + 90*beta17*f*gr1*k1^2*k2^5*Sin[2*theta] - 70*b1*beta19*C*gr1*k1^3*k2^3*k3*Sin[2*theta] - 84*b1*beta17*gr1*k1*k2^5*k3*Sin[2*theta] + 7*beta15*f*gr1*k1*k2^5*k3*Sin[2*theta] + 9*beta18*f*gr1*k1*k2^5*k3*Sin[2*theta] - 9*f^2*gr1^2*k1^2*k2^5*k3*Sin[2*theta] - 70*b1*C*f*gr2*k1*k2^3*k3^2*Sin[2*theta] - 70*b1^2*beta10*k1*k2*k3^4*Sin[2*theta] + Sin[theta]*(35*b1^2*(f*gr2*k2^4*(k1^2 + k3^2) + 2*k3^2*((beta13 + beta9)*k2^4 + beta10*(-k1^4 + k1^2*k3^2))) + 7*b1*(-2*beta10*f*k1^2*(k1^4 - k3^4) + k2^2*(-5*beta7*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) + 3*f^2*gr2*k2^2*(k1^2 - k3^2) + gr1*k3*(-5*beta19*(-1 + 2*C)*k1^2*(k1^2 - k3^2) - 2*k2^2*(-5*beta15*k1^2 + 5*beta16*k1^2 + 6*beta17*k1^2 - 2*beta18*k1^2 - 3*beta17*k1*k3 + beta18*k1*k3 + 5*beta14*k3^2)) + f*(5*beta6*K*k1^2*(-k1^2 + k3^2) - 5*gr2*(k1^2 - k3^2)*((-1 + 2*C)*k1^2 + K*k2^2 + (-1 + 2*C)*k3^2) + k2^2*(-10*beta11*k1^2 + 14*beta13*k1^2 - 6*beta8*k1^2 + 2*beta9*k1^2 + 2*gr1^2*k1^3*k3 + 2*beta13*k3^2 + 2*beta9*k3^2 - gr1^2*k1*k3^3 + 10*beta12*(k1^2 + k3^2))))) + f*(6*beta10*f*k1^4*(-k1^2 + k3^2) + k2^2*(-14*beta19*gr1*k1^5 + 28*beta19*C*gr1*k1^5 - 6*f^2*gr2*k1^2*k2^2 + 70*g2*gr2*k1^2*k2^2 - 14*beta14*gr1*k1^3*k2^2 - 28*beta15*gr1*k1^3*k2^2 + 42*beta16*gr1*k1^3*k2^2 + 54*beta17*gr1*k1^3*k2^2 - 18*beta18*gr1*k1^3*k2^2 + 7*beta19*gr1*k1^4*k3 - 14*beta19*C*gr1*k1^4*k3 + 7*gr1^2*k1^5*k3 - 14*C*gr1^2*k1^5*k3 + 14*beta15*gr1*k1^2*k2^2*k3 - 14*beta16*gr1*k1^2*k2^2*k3 - 36*beta17*gr1*k1^2*k2^2*k3 + 12*beta18*gr1*k1^2*k2^2*k3 + 14*beta19*gr1*k1^3*k3^2 - 28*beta19*C*gr1*k1^3*k3^2 + 35*b2*gr2*k2^2*k3^2 - 70*g2*gr2*k2^2*k3^2 + 42*beta14*gr1*k1*k2^2*k3^2 - 14*beta16*gr1*k1*k2^2*k3^2 - 7*beta19*gr1*k1^2*k3^3 + 14*beta19*C*gr1*k1^2*k3^3 - 7*gr1^2*k1^3*k3^3 + 14*C*gr1^2*k1^3*k3^3 - 14*beta14*gr1*k2^2*k3^3 - 7*beta7*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) + f*(-14*(-1 + 2*C)*gr2*k1^2*(k1^2 - k3^2) + 7*beta6*K*k1^2*(-k1^2 + k3^2) + k2^2*(-14*beta11*k1^2 - 3*k1^2*(-14*beta13 + 6*beta8 - 2*beta9 + gr1^2*k1*k3) + 14*beta12*(k1^2 + k3^2))))) - 6*beta10*f^2*k1*k2^3*k3^2*Sin[2*theta]))))\/(105*k1^3*k2^2*k3^4)"