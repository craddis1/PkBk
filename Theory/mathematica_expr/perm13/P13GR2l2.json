"(D1^4*Pk1*Pk3*(2*k1*(7*b1^2*(2*beta13 - beta8)*k1^2*k2^2*k3^2 - 6*beta7*(-1 + 2*C)*f^2*k1^4*(k1^2 - k3^2) + 6*beta6*f^2*K*k1^4*(-k1^2 + k3^2) + k1^2*k2^2*(-6*beta11*f^2*k1^2 + 10*beta13*f^2*k1^2 - 5*beta8*f^2*k1^2 + 14*g2*gr1^2*k1^2 + 28*f*g2*gr2*k1^2 + 7*b2*gr1^2*k3^2 - 14*g2*gr1^2*k3^2 + 14*b2*f*gr2*k3^2 - 28*f*g2*gr2*k3^2 + 6*beta12*f^2*(k1^2 + k3^2)) + b1*(-7*beta7*(-1 + 2*C)*f*k1^2*(k1^4 - k3^4) + 7*beta6*f*K*k1^2*(-k1^4 + k3^4) + k2^2*(12*beta13*f*k1^4 - 6*beta8*f*k1^4 + 7*beta14*gr1*k1^4 - 7*beta16*gr1*k1^4 - 7*gr1^2*K*k1^4 - 14*f*gr2*K*k1^4 + 12*beta13*f*k1^2*k3^2 - 6*beta8*f*k1^2*k3^2 - 14*beta14*gr1*k1^2*k3^2 + 14*beta16*gr1*k1^2*k3^2 + 7*gr1^2*K*k1^2*k3^2 + 14*f*gr2*K*k1^2*k3^2 + 7*beta14*gr1*k3^4 - 7*beta16*gr1*k3^4 - 7*beta11*f*k1^2*(k1^2 + k3^2) + 7*beta12*f*(k1^2 + k3^2)^2))) - 2*f*k2^3*(-12*b1*beta10*k1^2*(k1^2 - k3^2) - 10*beta10*f*k1^2*(k1^2 - k3^2) + k2^2*(-12*beta19*(-1 + C)*gr1*k1^2 + 12*(-1 + C)*gr1^2*k1^2 - 5*beta17*gr1*k2^2 + f*gr2*(6*(-7 + 8*C)*k1^2 + 5*f*k2^2 + 6*k3^2)))*Cos[theta]^5 + 2*f*k1*k2^4*(6*b1*beta10*k1^2 + 5*beta10*f*k1^2 - 12*(-1 + C)*f*gr2*k2^2)*Cos[theta]^6 + k1*(-(f*(beta10*f*k1^4*(k1^2 - k3^2) + k2^2*(-(gr1^2*k1^4) + 2*C*gr1^2*k1^4 - 2*f*gr2*k1^4 + 4*C*f*gr2*k1^4 + beta6*f*K*k1^4 + beta11*f*k1^2*k2^2 - beta12*f*k1^2*k2^2 - 7*beta13*f*k1^2*k2^2 + 3*beta8*f*k1^2*k2^2 - beta9*f*k1^2*k2^2 + beta14*gr1*k1^2*k2^2 + beta15*gr1*k1^2*k2^2 - 2*beta16*gr1*k1^2*k2^2 - 3*beta17*gr1*k1^2*k2^2 + beta18*gr1*k1^2*k2^2 + f*gr1^2*k1^2*k2^2 + 2*f^2*gr2*k1^2*k2^2 + 14*g2*gr2*k1^2*k2^2 + gr1^2*k1^2*k3^2 - 2*C*gr1^2*k1^2*k3^2 + 2*f*gr2*k1^2*k3^2 - 4*C*f*gr2*k1^2*k3^2 - beta6*f*K*k1^2*k3^2 - beta12*f*k2^2*k3^2 - 2*beta14*gr1*k2^2*k3^2 + beta16*gr1*k2^2*k3^2 + 7*b2*gr2*k2^2*k3^2 - 14*g2*gr2*k2^2*k3^2 + beta7*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) - beta19*(-1 + 2*C)*gr1*k1^2*(k1^2 - k3^2)))) + b1*(beta10*f*k1^2*(-k1^4 + k3^4) + k2^2*(-7*f*gr2*k1^4 + 14*C*f*gr2*k1^4 + 7*beta6*f*K*k1^4 + 7*beta11*f*k1^2*k2^2 - 7*beta12*f*k1^2*k2^2 + 7*beta13*f*k1^2*k2^2 - 3*beta8*f*k1^2*k2^2 + beta9*f*k1^2*k2^2 - 7*beta15*gr1*k1^2*k2^2 + 7*beta16*gr1*k1^2*k2^2 - 6*beta17*gr1*k1^2*k2^2 + 2*beta18*gr1*k1^2*k2^2 + 2*f*gr1^2*k1^2*k2^2 + 3*f^2*gr2*k1^2*k2^2 + 7*f*gr2*K*k1^2*k2^2 - 7*beta6*f*K*k1^2*k3^2 - 7*beta12*f*k2^2*k3^2 + beta13*f*k2^2*k3^2 + beta9*f*k2^2*k3^2 + 7*beta14*gr1*k2^2*k3^2 + 3*beta17*gr1*k2^2*k3^2 - beta18*gr1*k2^2*k3^2 - f*gr1^2*k2^2*k3^2 - 3*f^2*gr2*k2^2*k3^2 - 7*f*gr2*K*k2^2*k3^2 + 7*f*gr2*k3^4 - 14*C*f*gr2*k3^4 + 7*beta7*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) + 7*beta19*(-1 + 2*C)*gr1*k1^2*(k1^2 - k3^2))) - 7*b1^2*(f*gr2*k2^4*(k1^2 + k3^2) + k3^2*((beta13 + beta9)*k2^4 + beta10*(-k1^4 + k1^2*k3^2))) + 2*k1*k2*(5*beta19*C*f*gr1*k1^2*k2^2 + 6*f^2*gr2*k1^2*k2^2 + 7*b1*beta6*f*K*k1^2*k2^2 + 6*b1*beta13*f*k2^4 + 6*beta13*f^2*k2^4 - 6*b1*beta17*gr1*k2^4 + 9*beta17*f*gr1*k2^4 - 6*f^3*gr2*k2^4 + 7*b1*f*gr2*K*k2^4 - 7*b1*f*gr2*k2^2*k3^2 + 7*b1^2*beta10*k3^4 + C*f*k2^2*(-5*gr1^2*k1^2 + 6*f*gr2*k3^2))*Cos[theta])*Sin[theta]^2 - 6*k1*k2^2*(b1*(beta13*f + beta9*f - beta17*gr1 + f^2*gr2)*k2^4 - (-1 + 2*C)*f^2*gr2*k2^2*(k1^2 - k3^2) + b1*beta10*f*k1^2*(-k1^2 + k3^2))*Sin[theta]^4 + 2*k1*k2^2*Cos[theta]^4*(7*b1^2*beta10*k1^2*k3^2 + b1*(-14*beta7*(-1 + C)*f*k1^2*k2^2 + 14*beta19*gr1*k1^2*k2^2 - 14*beta19*C*gr1*k1^2*k2^2 + 14*f*gr2*k1^2*k2^2 - 14*C*f*gr2*k1^2*k2^2 - 7*beta6*f*(-1 + K)*k1^2*k2^2 + 6*beta13*f*k2^4 + 6*beta9*f*k2^4 - 6*beta17*gr1*k2^4 + 7*f*gr2*k2^4 + 6*f^2*gr2*k2^4 - 7*f*gr2*K*k2^4 - 12*beta10*f*k1^2*k3^2 + 14*f*gr2*k2^2*k3^2 - 14*C*f*gr2*k2^2*k3^2) + f*(-12*beta7*(-1 + C)*f*k1^2*k2^2 - 30*beta19*gr1*k1^2*k2^2 + 36*beta19*C*gr1*k1^2*k2^2 + 30*gr1^2*k1^2*k2^2 - 36*C*gr1^2*k1^2*k2^2 + 66*f*gr2*k1^2*k2^2 - 84*C*f*gr2*k1^2*k2^2 - 6*beta6*f*(-1 + K)*k1^2*k2^2 + 5*beta13*f*k2^4 + 5*beta9*f*k2^4 - 6*beta15*gr1*k2^4 + 20*beta17*gr1*k2^4 - 5*beta18*gr1*k2^4 - 5*f*gr1^2*k2^4 - 15*f^2*gr2*k2^4 + 14*g2*gr2*k2^4 - 15*beta10*f*k1^2*k3^2 + 6*beta19*gr1*k2^2*k3^2 - 6*gr1^2*k2^2*k3^2 - 18*f*gr2*k2^2*k3^2 + 12*C*f*gr2*k2^2*k3^2) + 3*f*k2^2*(b1*beta10*k1^2 + beta10*f*k1^2 - 2*(-1 + C)*f*gr2*k2^2)*Sin[theta]^2) - 2*k2*Cos[theta]^3*(10*beta10*f^2*k1^6 - 18*beta6*f^2*k1^4*k2^2 - 42*beta7*f^2*k1^4*k2^2 + 48*beta7*C*f^2*k1^4*k2^2 + 24*beta19*f*gr1*k1^4*k2^2 - 36*beta19*C*f*gr1*k1^4*k2^2 - 24*f*gr1^2*k1^4*k2^2 + 36*C*f*gr1^2*k1^4*k2^2 - 48*f^2*gr2*k1^4*k2^2 + 72*C*f^2*gr2*k1^4*k2^2 + 24*beta6*f^2*K*k1^4*k2^2 + 6*beta11*f^2*k1^2*k2^4 - 20*beta13*f^2*k1^2*k2^4 + 5*beta8*f^2*k1^2*k2^4 - 10*beta9*f^2*k1^2*k2^4 + 12*beta15*f*gr1*k1^2*k2^4 - 6*beta16*f*gr1*k1^2*k2^4 - 30*beta17*f*gr1*k1^2*k2^4 + 10*beta18*f*gr1*k1^2*k2^4 + 10*f^2*gr1^2*k1^2*k2^4 - 14*g2*gr1^2*k1^2*k2^4 + 20*f^3*gr2*k1^2*k2^4 - 56*f*g2*gr2*k1^2*k2^4 + 6*beta6*f^2*k1^2*k2^2*k3^2 + 6*beta7*f^2*k1^2*k2^2*k3^2 - 12*beta19*f*gr1*k1^2*k2^2*k3^2 + 12*beta19*C*f*gr1*k1^2*k2^2*k3^2 + 12*f*gr1^2*k1^2*k2^2*k3^2 - 12*C*f*gr1^2*k1^2*k2^2*k3^2 + 24*f^2*gr2*k1^2*k2^2*k3^2 - 24*C*f^2*gr2*k1^2*k2^2*k3^2 - 6*beta14*f*gr1*k2^4*k3^2 + 14*b1^2*beta10*k1^2*k3^4 + 12*b1*beta10*f*k1^2*(k1^4 + k3^4) + b1*k2^2*(-35*beta19*gr1*k1^4 + 42*beta19*C*gr1*k1^4 - 21*f*gr2*k1^4 + 28*C*f*gr2*k1^4 + 7*beta11*f*k1^2*k2^2 - 24*beta13*f*k1^2*k2^2 + 6*beta8*f*k1^2*k2^2 - 12*beta9*f*k1^2*k2^2 - 7*beta15*gr1*k1^2*k2^2 + 24*beta17*gr1*k1^2*k2^2 - 6*beta18*gr1*k1^2*k2^2 - 7*gr1^2*k1^2*k2^2 - 6*f*gr1^2*k1^2*k2^2 - 21*f*gr2*k1^2*k2^2 - 12*f^2*gr2*k1^2*k2^2 + 7*gr1^2*K*k1^2*k2^2 + 28*f*gr2*K*k1^2*k2^2 + 21*beta19*gr1*k1^2*k3^2 - 14*beta19*C*gr1*k1^2*k3^2 - 14*f*gr2*k1^2*k3^2 + 28*C*f*gr2*k1^2*k3^2 - 6*beta17*gr1*k2^2*k3^2 + 7*f*gr2*k2^2*k3^2 + 12*f^2*gr2*k2^2*k3^2 + 7*f*gr2*k3^4 + 7*beta7*f*k1^2*((-7 + 8*C)*k1^2 + k3^2) + 7*beta6*f*k1^2*((-3 + 4*K)*k1^2 + k3^2)) + f*k2^2*(-3*b1*beta10*k1^2*(k1^2 - 2*k3^2) - 3*beta10*f*k1^2*(k1^2 - 2*k3^2) + k2^2*(-3*beta19*(-1 + C)*gr1*k1^2 + 3*(-1 + C)*gr1^2*k1^2 - 5*beta17*gr1*k2^2 + f*gr2*(3*(-5 + 6*C)*k1^2 + 5*f*k2^2 + 3*k3^2)))*Sin[theta]^2) + k1*Cos[theta]^2*(-2*(5*beta10*f^2*k1^4*(k1^2 - k3^2) + k2^2*(6*beta19*f*gr1*k1^4 - 12*beta19*C*f*gr1*k1^4 - 6*f*gr1^2*k1^4 + 12*C*f*gr1^2*k1^4 - 12*f^2*gr2*k1^4 + 24*C*f^2*gr2*k1^4 + 18*beta11*f^2*k1^2*k2^2 - 6*beta12*f^2*k1^2*k2^2 - 35*beta13*f^2*k1^2*k2^2 + 15*beta8*f^2*k1^2*k2^2 - 5*beta9*f^2*k1^2*k2^2 + 6*beta14*f*gr1*k1^2*k2^2 + 6*beta15*f*gr1*k1^2*k2^2 - 12*beta16*f*gr1*k1^2*k2^2 - 15*beta17*f*gr1*k1^2*k2^2 + 5*beta18*f*gr1*k1^2*k2^2 + 5*f^2*gr1^2*k1^2*k2^2 - 42*g2*gr1^2*k1^2*k2^2 + 10*f^3*gr2*k1^2*k2^2 - 98*f*g2*gr2*k1^2*k2^2 - 6*beta19*f*gr1*k1^2*k3^2 + 12*beta19*C*f*gr1*k1^2*k3^2 + 6*f*gr1^2*k1^2*k3^2 - 12*C*f*gr1^2*k1^2*k3^2 + 12*f^2*gr2*k1^2*k3^2 - 24*C*f^2*gr2*k1^2*k3^2 - 6*beta12*f^2*k2^2*k3^2 - 12*beta14*f*gr1*k2^2*k3^2 + 6*beta16*f*gr1*k2^2*k3^2 - 7*b2*f*gr2*k2^2*k3^2 + 14*f*g2*gr2*k2^2*k3^2 + 6*beta7*f^2*k1^2*(3*(-3 + 4*C)*k1^2 + (3 - 2*C)*k3^2) + 6*beta6*f^2*k1^2*((-3 + 6*K)*k1^2 - (-2 + K)*k3^2)) + b1*(6*beta10*f*k1^2*(k1^4 - k3^4) + k2^2*(-28*beta19*gr1*k1^4 + 42*beta19*C*gr1*k1^4 - 7*f*gr2*k1^4 + 14*C*f*gr2*k1^4 + 21*beta11*f*k1^2*k2^2 - 7*beta12*f*k1^2*k2^2 - 42*beta13*f*k1^2*k2^2 + 18*beta8*f*k1^2*k2^2 - 6*beta9*f*k1^2*k2^2 - 14*beta15*gr1*k1^2*k2^2 + 7*beta16*gr1*k1^2*k2^2 + 36*beta17*gr1*k1^2*k2^2 - 12*beta18*gr1*k1^2*k2^2 - 14*gr1^2*k1^2*k2^2 - 12*f*gr1^2*k1^2*k2^2 - 28*f*gr2*k1^2*k2^2 - 18*f^2*gr2*k1^2*k2^2 + 21*gr1^2*K*k1^2*k2^2 + 49*f*gr2*K*k1^2*k2^2 + 35*beta19*gr1*k1^2*k3^2 - 42*beta19*C*gr1*k1^2*k3^2 - 7*beta12*f*k2^2*k3^2 - 6*beta13*f*k2^2*k3^2 - 6*beta9*f*k2^2*k3^2 + 7*beta14*gr1*k2^2*k3^2 + 7*beta15*gr1*k2^2*k3^2 - 18*beta17*gr1*k2^2*k3^2 + 6*beta18*gr1*k2^2*k3^2 + 7*gr1^2*k2^2*k3^2 + 6*f*gr1^2*k2^2*k3^2 + 14*f*gr2*k2^2*k3^2 + 18*f^2*gr2*k2^2*k3^2 - 7*f*gr2*K*k2^2*k3^2 - 7*beta19*gr1*k3^4 + 7*f*gr2*k3^4 - 14*C*f*gr2*k3^4 + 7*beta7*f*k1^2*(3*(-3 + 4*C)*k1^2 + k3^2) + 7*beta6*f*k1^2*((-3 + 6*K)*k1^2 + k3^2))) - 7*b1^2*(f*gr2*k2^4*(k1^2 + k3^2) + k3^2*((beta13 + beta9)*k2^4 + beta10*(-k1^4 + k1^2*k3^2)))) - k2^2*(7*b1^2*beta10*k1^2*k3^2 + b1*(-7*beta6*f*(-1 + K)*k1^2*k2^2 - (6*beta13*f + 6*beta9*f - 6*beta17*gr1 - 7*f*gr2 + 6*f^2*gr2 + 7*f*gr2*K)*k2^4 + 5*beta10*f*k1^2*(k1^2 + k3^2)) + f*(beta10*f*k1^2*(5*k1^2 + 6*k3^2) + k2^2*(2*beta7*(-1 + C)*f*k1^2 + 11*beta19*gr1*k1^2 - 11*gr1^2*k1^2 + beta6*f*(-1 + K)*k1^2 - 6*beta13*f*k2^2 - 6*beta9*f*k2^2 + 3*beta15*gr1*k2^2 + 6*beta18*gr1*k2^2 + 6*f*gr1^2*k2^2 - 3*beta19*gr1*k3^2 + 3*gr1^2*k3^2)))*Sin[theta]^2 - 6*f*k2^4*(b1*beta10*k1^2 - 2*(-1 + C)*f*gr2*k2^2)*Sin[theta]^4) + k2*Cos[theta]*(2*(-6*beta7*f^2*k1^4*((-5 + 8*C)*k1^2 + (3 - 4*C)*k3^2) - 6*beta6*f^2*k1^4*((-1 + 4*K)*k1^2 + (1 - 2*K)*k3^2) + k1^2*k2^2*(-18*beta11*f^2*k1^2 + 30*beta13*f^2*k1^2 - 15*beta8*f^2*k1^2 - 6*beta14*f*gr1*k1^2 + 6*beta16*f*gr1*k1^2 + 42*g2*gr1^2*k1^2 + 84*f*g2*gr2*k1^2 + 6*beta14*f*gr1*k3^2 - 6*beta16*f*gr1*k3^2 + 7*b2*gr1^2*k3^2 - 14*g2*gr1^2*k3^2 + 14*b2*f*gr2*k3^2 - 28*f*g2*gr2*k3^2 + 12*beta12*f^2*(k1^2 + k3^2)) + 7*b1^2*k2^2*((2*beta13 - beta8)*k1^2*k3^2 + f*gr2*(k1^4 - k3^4)) + b1*(7*beta19*gr1*k1^6 - 14*beta19*C*gr1*k1^6 - 21*beta11*f*k1^4*k2^2 + 14*beta12*f*k1^4*k2^2 + 36*beta13*f*k1^4*k2^2 - 18*beta8*f*k1^4*k2^2 + 7*beta14*gr1*k1^4*k2^2 + 7*beta15*gr1*k1^4*k2^2 - 14*beta16*gr1*k1^4*k2^2 - 18*beta17*gr1*k1^4*k2^2 + 6*beta18*gr1*k1^4*k2^2 + 7*gr1^2*k1^4*k2^2 + 6*f*gr1^2*k1^4*k2^2 + 14*f*gr2*k1^4*k2^2 + 12*f^2*gr2*k1^4*k2^2 - 21*gr1^2*K*k1^4*k2^2 - 42*f*gr2*K*k1^4*k2^2 - 14*beta19*gr1*k1^4*k3^2 + 28*beta19*C*gr1*k1^4*k3^2 - 7*beta11*f*k1^2*k2^2*k3^2 + 14*beta12*f*k1^2*k2^2*k3^2 + 12*beta13*f*k1^2*k2^2*k3^2 - 6*beta8*f*k1^2*k2^2*k3^2 - 14*beta14*gr1*k1^2*k2^2*k3^2 - 7*beta15*gr1*k1^2*k2^2*k3^2 + 14*beta16*gr1*k1^2*k2^2*k3^2 + 18*beta17*gr1*k1^2*k2^2*k3^2 - 6*beta18*gr1*k1^2*k2^2*k3^2 - 7*gr1^2*k1^2*k2^2*k3^2 - 6*f*gr1^2*k1^2*k2^2*k3^2 - 14*f*gr2*k1^2*k2^2*k3^2 - 12*f^2*gr2*k1^2*k2^2*k3^2 + 7*gr1^2*K*k1^2*k2^2*k3^2 + 14*f*gr2*K*k1^2*k2^2*k3^2 + 7*beta19*gr1*k1^2*k3^4 - 14*beta19*C*gr1*k1^2*k3^4 + 7*beta14*gr1*k2^2*k3^4 - 7*beta7*f*k1^2*((-5 + 8*C)*k1^4 + k3^4) - 7*beta6*f*k1^2*((-1 + 4*K)*k1^4 + k3^4))) - (beta10*f^2*(6*k1^6 - 4*k1^4*k3^2) + 2*b1*beta10*f*k1^2*(3*k1^4 - 2*k1^2*k3^2 + k3^4) - b1*k2^2*(-21*beta19*gr1*k1^4 + 28*beta19*C*gr1*k1^4 - 21*f*gr2*k1^4 + 28*C*f*gr2*k1^4 + 7*beta11*f*k1^2*k2^2 - 3*beta8*f*k1^2*k2^2 + 6*beta9*f*k1^2*k2^2 - 7*beta15*gr1*k1^2*k2^2 + 3*beta18*gr1*k1^2*k2^2 + 3*f*gr1^2*k1^2*k2^2 - 7*f*gr2*k1^2*k2^2 + 6*f^2*gr2*k1^2*k2^2 + 7*beta19*gr1*k1^2*k3^2 + 28*C*f*gr2*k1^2*k3^2 + 3*beta17*gr1*k2^2*k3^2 + 7*f*gr2*k2^2*k3^2 - 6*f^2*gr2*k2^2*k3^2 + 7*f*gr2*k3^4 + 7*beta6*f*k1^2*(-k1^2 + k3^2) + 7*beta7*f*k1^2*((-3 + 4*C)*k1^2 + k3^2)) + f*k2^2*(6*beta19*gr1*k1^4 - 6*gr1^2*k1^4 + 20*C*f*gr2*k1^4 + beta11*f*k1^2*k2^2 + 3*beta8*f*k1^2*k2^2 - 6*beta9*f*k1^2*k2^2 + 4*beta15*gr1*k1^2*k2^2 - 3*beta16*gr1*k1^2*k2^2 + 6*beta18*gr1*k1^2*k2^2 + 6*f*gr1^2*k1^2*k2^2 + 28*g2*gr2*k1^2*k2^2 - 4*beta19*gr1*k1^2*k3^2 + 6*beta19*C*gr1*k1^2*k3^2 + 4*gr1^2*k1^2*k3^2 - 6*C*gr1^2*k1^2*k3^2 + 8*f*gr2*k1^2*k3^2 - 3*beta14*gr1*k2^2*k3^2 + beta7*f*k1^2*((-3 + 4*C)*k1^2 + k3^2) + beta6*f*k1^2*((-1 + 2*K)*k1^2 + k3^2)))*Sin[theta]^2 + 6*f*k2^2*(2*b1*beta10*k1^2*k3^2 + f*gr2*k2^2*((-3 + 4*C)*k1^2 + k3^2))*Sin[theta]^4) + (k1*k2^4*(7*b1*(-1 + C)*(beta7*f*k1^2 + beta19*gr1*k1^2 + f*gr2*(k1^2 + k3^2)) + f*(7*beta19*C*gr1*k1^2 + 14*f*gr2*k1^2 + 12*beta17*gr1*k2^2 - 9*f^2*gr2*k2^2 - 7*g2*gr2*k2^2 - 6*f*gr2*k3^2 + C*(-7*gr1^2*k1^2 - 20*f*gr2*k1^2 + 6*f*gr2*k3^2)))*Sin[2*theta]^2)\/2))\/(21*k1^3*k2^2*k3^4)"