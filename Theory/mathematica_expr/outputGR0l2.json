"-1\/693*(D1^4*f*Pk1*Pk3*(2*f*k2^3*(33*b1*(6*(-7 + 8*C)*k1^2 + 5*f*k2^2 + 6*k3^2) + 5*f*(33*(-7 + 8*C)*k1^2 + 28*f*k2^2 + 33*k3^2))*Cos[theta]^5 + 132*(-1 + C)*f*(6*b1 + 5*f)*k1*k2^4*Cos[theta]^6 + 18*f*k1*k2^2*(11*b1^2*k2^2 + f^2*k2^2 - 11*b1*(-1 + 2*C)*(k1^2 - k3^2))*Sin[theta]^2 + 6*k1*k2^2*Cos[theta]^4*(-11*b1^2*((7 + 6*f - 7*K)*k2^2 - 14*(-1 + C)*k3^2) + 22*b1*(5*f^2*k2^2 - 7*g2*k2^2 + 3*f*(3*(-3 + 4*C)*k1^2 + (-1 + K)*k2^2 + k3^2)) + f*(140*f^2*k2^2 - 132*g2*k2^2 + 55*f*(3*(-3 + 4*C)*k1^2 + (3 - 2*C)*k3^2)) + 66*(-1 + C)*f*(b1 + f)*k2^2*Sin[theta]) + 2*k2*Cos[theta]^3*(3*f*k1^2*(140*f^2*k2^2 - 528*g2*k2^2 + 55*f*((-5 + 8*C)*k1^2 + (3 - 4*C)*k3^2)) - 33*b1^2*(-(k3^2*((7 + 12*f)*k2^2 + 7*k3^2)) + k1^2*((21 + 18*f - 28*K)*k2^2 + 7*(3 - 4*C)*k3^2)) + 66*b1*(-28*g2*k1^2*k2^2 + 5*f^2*k2^2*k3^2 + 3*f*((-5 + 8*C)*k1^4 + (-3 + 4*K)*k1^2*k2^2 + k3^2*(k2^2 + k3^2))) + f*k2^2*(33*b1*(3*(-5 + 6*C)*k1^2 + 5*f*k2^2 + 3*k3^2) + f*(99*(-5 + 6*C)*k1^2 + 125*f*k2^2 + 99*k3^2))*Sin[theta]) + k1*Cos[theta]^2*(-2*(231*b1^3*k2^2*k3^2 + 33*b1^2*(-((7 + 12*f)*k2^2*k3^2) + 7*(-1 + 2*C)*k3^4 + k1^2*(3*(7 + 6*f - 14*K)*k2^2 + 7*(1 - 2*C)*k3^2)) + f*(-140*f^2*k1^2*k2^2 - 165*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) + 198*k2^2*(12*g2*k1^2 + b2*k3^2 - 2*g2*k3^2)) + 33*b1*(5*f^2*k2^2*(2*k1^2 - 3*k3^2) + 7*k2^2*(12*g2*k1^2 + b2*k3^2) - 6*f*((-1 + 2*C)*k1^4 + 3*(-1 + 2*K)*k1^2*k2^2 - (-2 + K)*k2^2*k3^2 + (1 - 2*C)*k3^4))) - 3*k2^2*(11*b1^2*((-7 + 6*f + 7*K)*k2^2 + 14*(-1 + C)*k3^2) + 2*f*(-11*(-13 + 19*C)*f*k1^2 - 75*f^2*k2^2 + 11*g2*k2^2 + 66*(-1 + C)*f*k3^2) - 11*b1*(12*f^2*k2^2 + 14*g2*k2^2 + f*((-26 + 38*C)*k1^2 + (-1 + K)*k2^2 - 10*(-1 + C)*k3^2)))*Sin[theta]) - 3*k2*Cos[theta]*(22*(7*b1^3*k3^2*(k1^2 - k3^2) + 12*f*k1^2*(4*g2*k1^2 + b2*k3^2 - 2*g2*k3^2) + b1^2*((7 + 6*f - 28*K)*k1^4 - (7 + 6*f)*k3^4) + b1*k1^2*(5*f^2*(k1^2 - k3^2) + 14*(4*g2*k1^2 + b2*k3^2) - 6*f*((-1 + 4*K)*k1^2 + (1 - 2*K)*k3^2))) + (f^2*k1^2*((99 - 176*C)*k1^2 - 75*f*k2^2 + 11*(-7 + 12*C)*k3^2) + 11*b1^2*(7*k3^2*(k2^2 + k3^2) + k1^2*((-7 + 9*f + 14*K)*k2^2 + 7*(-3 + 4*C)*k3^2)) - 11*b1*(28*g2*k1^2*k2^2 + f*((-9 + 16*C)*k1^4 + k3^2*(k2^2 + k3^2) + k1^2*((-1 + 2*K)*k2^2 - 8*C*k3^2))))*Sin[theta] - 2*f*k2^2*(-33*b1*(-3 + 4*C)*k1^2 + 5*f^2*k2^2)*Sin[theta]^2) + Sin[theta]*(k1*(231*b1^3*k2^2*k3^2 - 33*b1^2*(f*k2^2*(3*k1^2 - 2*k3^2) + 7*(k1^2 - k3^2)*(K*k2^2 + (-1 + 2*C)*k3^2)) + f*(25*f^2*k1^2*k2^2 + 33*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) - 33*k2^2*(b2*k3^2 + 2*g2*(k1^2 - k3^2))) - 33*b1*(f^2*k2^2*(2*k1^2 - 3*k3^2) + f*((1 - 2*C)*k1^4 - K*k1^2*k2^2 + K*k2^2*k3^2 + (-1 + 2*C)*k3^4) - 7*k2^2*(b2*k3^2 + 2*g2*(k1^2 - k3^2)))) - 99*b1*f*k2^3*k3^2*Sin[2*theta]) + 33*(2*k1*(-2*g2*k1^2 + b1*K*k1^2 - b2*k3^2 + 2*g2*k3^2 - b1*K*k3^2)*(6*f*k1^2 + 7*b1*(k1^2 + k3^2)) + f*k2*(-2*g2*k1^2*k2^2 + b1*(2*k1^2 + 3*(b1 + f)*k2^2)*k3^2)*Sin[2*theta] - 3*b1*(-1 + C)*f*k1*k2^4*Sin[2*theta]^2)))\/(k1*k3^4)"