"((-1\/105*I)*D1^4*Pk1*Pk3*(f*k2^4*(18*b1*(7*beta19*(-1 + C)*k1^2 + 5*beta17*k2^2 - 7*(-1 + C)*gr1*k1^2*k3) + 5*f*(18*beta19*(-1 + C)*k1^2 + 14*beta17*k2^2 + gr1*k1*(9*(-7 + 8*C)*k1^2 + 7*f*k2^2 - 18*(-1 + C)*k1*k3 + 9*k3^2)))*Cos[theta]^5 + 90*(-1 + C)*f^2*gr1*k1^2*k2^5*Cos[theta]^6 + k1*k2*(-3*b1*f*(28*beta15*k1^2*k2^2 - 42*beta16*k1^2*k2^2 - 54*beta17*k1^2*k2^2 + 18*beta18*k1^2*k2^2 + 9*f*gr1*k1^3*k2^2 - 7*gr1*K*k1^3*k2^2 - 7*gr1*k1^4*k3 + 14*C*gr1*k1^4*k3 - 3*f*gr1*k1^2*k2^2*k3 + 7*gr1*k1^3*k3^2 - 14*C*gr1*k1^3*k3^2 + 14*beta16*k2^2*k3^2 - 18*beta17*k2^2*k3^2 + 6*beta18*k2^2*k3^2 - 9*f*gr1*k1*k2^2*k3^2 + 7*gr1*K*k1*k2^2*k3^2 + 7*gr1*k1^2*k3^3 - 14*C*gr1*k1^2*k3^3 + 3*f*gr1*k2^2*k3^3 - 7*gr1*k1*k3^4 + 14*C*gr1*k1*k3^4 + 14*beta14*k2^2*(k1^2 - 3*k3^2) - 14*beta19*(-1 + 2*C)*k1^2*(k1^2 - k3^2)) - 21*b1^2*k2^2*k3*(2*(-3*beta17 + beta18)*k3 + f*gr1*(-2*k1^2 + k1*k3 + k3^2)) + f*(5*f^2*gr1*k1^2*k2^2*(k1 - k3) + 9*(-1 + 2*C)*f*gr1*k1^2*(k1 - k3)^2*(k1 + k3) + 18*beta19*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) - 6*f*k2^2*(6*beta15*k1^2 - 9*beta16*k1^2 - 15*beta17*k1^2 + 5*beta18*k1^2 + 3*beta16*k3^2 + 3*beta14*(k1^2 - 3*k3^2)) - 21*gr1*k1*k2^2*(b2*k3^2 + 2*g2*(k1^2 - k3^2))))*Sin[theta] + 3*f*k1*k2^3*(6*b1*(5*beta17 - beta18)*k2^2 + 2*(5*beta17 - beta18)*f*k2^2 + f^2*gr1*k2^2*(3*k1 - k3) + 3*f*gr1*(k1 + k3)*((-1 + 2*C)*k1^2 - b1*k2^2 + k1*(k3 - 2*C*k3)))*Sin[theta]^2 + f*k1*k2^3*Cos[theta]^4*(-315*beta19*f*k1^2 + 360*beta19*C*f*k1^2 - 405*f*gr1*k1^3 + 540*C*f*gr1*k1^3 - 90*beta15*f*k2^2 + 350*beta17*f*k2^2 - 70*beta18*f*k2^2 + 105*f^2*gr1*k1*k2^2 - 126*g2*gr1*k1*k2^2 + 225*f*gr1*k1^2*k3 - 270*C*f*gr1*k1^2*k3 - 35*f^2*gr1*k2^2*k3 + 45*beta19*f*k3^2 + 135*f*gr1*k1*k3^2 - 90*C*f*gr1*k1*k3^2 - 45*f*gr1*k3^3 + 9*b1*(-14*beta15*k2^2 + 50*beta17*k2^2 - 10*beta18*k2^2 - 7*gr1*k1*k2^2 - 5*f*gr1*k1*k2^2 + 7*gr1*K*k1*k2^2 + 35*gr1*k1^2*k3 - 42*C*gr1*k1^2*k3 - 5*f*gr1*k2^2*k3 - 14*gr1*k1*k3^2 + 14*C*gr1*k1*k3^2 - 7*gr1*k3^3 + 7*beta19*((-7 + 8*C)*k1^2 + k3^2)) + 108*(-1 + C)*f*gr1*k1*k2^2*Sin[theta]) + k1*k2*Cos[theta]^2*(3*b1*(-126*beta15*f*k1^2*k2^2 + 126*beta16*f*k1^2*k2^2 + 270*beta17*f*k1^2*k2^2 - 90*beta18*f*k1^2*k2^2 - 63*f*gr1*k1^3*k2^2 - 45*f^2*gr1*k1^3*k2^2 + 126*f*gr1*K*k1^3*k2^2 + 21*f*gr1*k1^4*k3 - 42*C*f*gr1*k1^4*k3 + 42*f*gr1*k1^2*k2^2*k3 + 15*f^2*gr1*k1^2*k2^2*k3 + 210*g2*gr1*k1^2*k2^2*k3 - 63*f*gr1*K*k1^2*k2^2*k3 - 21*f*gr1*k1^3*k3^2 + 42*C*f*gr1*k1^3*k3^2 - 42*beta15*f*k2^2*k3^2 - 42*beta16*f*k2^2*k3^2 + 90*beta17*f*k2^2*k3^2 - 30*beta18*f*k2^2*k3^2 + 42*f*gr1*k1*k2^2*k3^2 + 45*f^2*gr1*k1*k2^2*k3^2 - 70*g2*gr1*k1*k2^2*k3^2 - 21*f*gr1*K*k1*k2^2*k3^2 - 21*f*gr1*k1^2*k3^3 + 42*C*f*gr1*k1^2*k3^3 - 21*f*gr1*k2^2*k3^3 - 15*f^2*gr1*k2^2*k3^3 + 21*f*gr1*k1*k3^4 - 42*C*f*gr1*k1*k3^4 - 42*beta14*f*k2^2*(k1^2 - 3*k3^2) + 21*beta19*f*((-5 + 8*C)*k1^4 + k3^4)) + 21*b1^2*k3*(gr1*k2^2*((10 + 6*f - 15*K)*k1^2 + (-5 - 3*f + 5*K)*k1*k3 - (5 + 3*f)*k3^2) + k3*(-2*(5*beta15 - 9*beta17 + 3*beta18)*k2^2 + 5*beta19*((-3 + 4*C)*k1^2 + k3^2))) + f*(35*f^2*gr1*k1^2*k2^2*(k1 - k3) + 45*beta19*f*k1^2*((-5 + 8*C)*k1^2 + (3 - 4*C)*k3^2) - 63*gr1*k1*k2^2*(b2*k3^2 + 2*g2*(6*k1^2 - 3*k1*k3 - k3^2)) + 15*f*(3*(-1 + 2*C)*gr1*k1^2*(k1 - k3)^2*(k1 + k3) - 2*k2^2*(3*beta14*k1^2 + 9*beta15*k1^2 - 9*beta16*k1^2 - 21*beta17*k1^2 + 7*beta18*k1^2 - 9*beta14*k3^2 + 3*beta16*k3^2))) + 3*f*k2^2*(-78*f*gr1*k1^3 + 114*C*f*gr1*k1^3 - 18*beta15*f*k2^2 + 100*beta17*f*k2^2 - 20*beta18*f*k2^2 + 30*f^2*gr1*k1*k2^2 - 14*g2*gr1*k1*k2^2 + 33*f*gr1*k1^2*k3 - 42*C*f*gr1*k1^2*k3 - 10*f^2*gr1*k2^2*k3 + 36*f*gr1*k1*k3^2 - 36*C*f*gr1*k1*k3^2 - 9*f*gr1*k3^3 + 3*beta19*f*((-13 + 16*C)*k1^2 + 3*k3^2) + b1*(-42*beta15*k2^2 + 180*beta17*k2^2 - 36*beta18*k2^2 - 7*gr1*k1*k2^2 - 18*f*gr1*k1*k2^2 + 7*gr1*K*k1*k2^2 + 77*gr1*k1^2*k3 - 98*C*gr1*k1^2*k3 - 18*f*gr1*k2^2*k3 - 14*gr1*k1*k3^2 + 14*C*gr1*k1*k3^2 - 21*gr1*k3^3 + 7*beta19*((-13 + 16*C)*k1^2 + 3*k3^2)))*Sin[theta]) + k2^2*Cos[theta]^3*(21*b1^2*k3*(gr1*(5 + 3*f - 5*K)*k1^2*k2^2 + 10*beta19*(-1 + C)*k1^2*k3 + 6*beta17*k2^2*k3) + 3*b1*(-126*beta15*f*k1^2*k2^2 + 42*beta16*f*k1^2*k2^2 + 300*beta17*f*k1^2*k2^2 - 90*beta18*f*k1^2*k2^2 - 63*f*gr1*k1^3*k2^2 - 45*f^2*gr1*k1^3*k2^2 + 84*f*gr1*K*k1^3*k2^2 + 84*f*gr1*k1^4*k3 - 126*C*f*gr1*k1^4*k3 + 21*f*gr1*k1^2*k2^2*k3 - 15*f^2*gr1*k1^2*k2^2*k3 + 70*g2*gr1*k1^2*k2^2*k3 - 21*f*gr1*K*k1^2*k2^2*k3 - 63*f*gr1*k1^3*k3^2 + 84*C*f*gr1*k1^3*k3^2 + 42*beta14*f*k2^2*k3^2 + 30*beta17*f*k2^2*k3^2 + 21*f*gr1*k1*k2^2*k3^2 + 30*f^2*gr1*k1*k2^2*k3^2 - 42*f*gr1*k1^2*k3^3 + 42*C*f*gr1*k1^2*k3^3 + 21*f*gr1*k1*k3^4 + 21*beta19*f*k1^2*(3*(-3 + 4*C)*k1^2 + k3^2)) + f*(35*f^2*gr1*k1^2*k2^2*(3*k1 - 2*k3) + 126*g2*gr1*k1^2*k2^2*(-4*k1 + k3) + 45*beta19*f*k1^2*(3*(-3 + 4*C)*k1^2 + (3 - 2*C)*k3^2) + 5*f*(2*k2^2*(-27*beta15*k1^2 + 9*beta16*k1^2 + 70*beta17*k1^2 - 21*beta18*k1^2 + 9*beta14*k3^2) + 9*gr1*k1^2*(k1 - k3)*((-5 + 8*C)*k1^2 + (-1 + 2*C)*k1*k3 - 2*(-1 + C)*k3^2))) + 2*f*k2^2*(9*b1*(7*beta19*(-1 + C)*k1^2 + 10*beta17*k2^2 - 7*(-1 + C)*gr1*k1^2*k3) + f*(27*beta19*(-1 + C)*k1^2 + 50*beta17*k2^2 + gr1*k1*(27*(-5 + 6*C)*k1^2 + 25*f*k2^2 - 27*(-1 + C)*k1*k3 + 27*k3^2)))*Sin[theta]) + Cos[theta]*(f*k1^2*(45*beta19*(-1 + 2*C)*f*k1^2*(k1^2 - k3^2) + k2^2*(-90*beta15*f*k1^2 + 270*beta16*f*k1^2 + 210*beta17*f*k1^2 - 70*beta18*f*k1^2 - 504*g2*gr1*k1^3 + 378*g2*gr1*k1^2*k3 - 180*beta16*f*k3^2 - 126*b2*gr1*k1*k3^2 + 252*g2*gr1*k1*k3^2 + 63*b2*gr1*k3^3 - 126*g2*gr1*k3^3 - 90*beta14*f*(2*k1^2 - 3*k3^2))) + 21*b1^2*k3*(gr1*k1*k2^2*(k1 - k3)*((5 + 3*f - 15*K)*k1^2 - 5*K*k1*k3 - (5 + 3*f)*k3^2) + k3*(5*beta19*(-1 + 2*C)*k1^2*(k1^2 - k3^2) + 2*k2^2*(-5*beta15*k1^2 + 5*beta16*k1^2 + 9*beta17*k1^2 - 3*beta18*k1^2 + 5*beta14*k3^2))) + 3*b1*(21*beta19*(-1 + 2*C)*f*k1^2*(k1^4 - k3^4) + k2^2*(-42*beta14*f*(2*k1^4 - 3*k1^2*k3^2 - k3^4) - k1^2*(-126*beta16*f*k1^2 - 90*beta17*f*k1^2 + 30*beta18*f*k1^2 + 21*f*gr1*k1^3 + 15*f^2*gr1*k1^3 - 84*f*gr1*K*k1^3 - 21*f*gr1*k1^2*k3 - 15*f^2*gr1*k1^2*k3 - 210*g2*gr1*k1^2*k3 + 63*f*gr1*K*k1^2*k3 + 42*beta16*f*k3^2 - 90*beta17*f*k3^2 + 30*beta18*f*k3^2 - 21*f*gr1*k1*k3^2 - 15*f^2*gr1*k1*k3^2 + 140*g2*gr1*k1*k3^2 + 42*f*gr1*K*k1*k3^2 - 35*b2*gr1*k3^3 + 21*f*gr1*k3^3 + 15*f^2*gr1*k3^3 + 70*g2*gr1*k3^3 - 21*f*gr1*K*k3^3 + 42*beta15*f*(k1^2 + k3^2)))) + 3*f*k2^2*(-27*f*gr1*k1^5 - 30*beta15*f*k1^2*k2^2 + 18*beta16*f*k1^2*k2^2 + 100*beta17*f*k1^2*k2^2 - 30*beta18*f*k1^2*k2^2 + 15*f^2*gr1*k1^3*k2^2 - 28*g2*gr1*k1^3*k2^2 + 18*f*gr1*k1^4*k3 - 30*C*f*gr1*k1^4*k3 + 21*b1^2*gr1*k1^2*k2^2*k3 - 10*f^2*gr1*k1^2*k2^2*k3 + 21*f*gr1*k1^3*k3^2 + 18*beta14*f*k2^2*k3^2 - 12*f*gr1*k1^2*k3^3 + 18*C*f*gr1*k1^2*k3^3 - 3*beta19*f*k1^2*(9*k1^2 + (-5 + 6*C)*k3^2) + b1*(-70*beta15*k1^2*k2^2 + 180*beta17*k1^2*k2^2 - 7*gr1*k1^3*k2^2 - 27*f*gr1*k1^3*k2^2 + 14*gr1*K*k1^3*k2^2 - 70*C*gr1*k1^4*k3 - 9*f*gr1*k1^2*k2^2*k3 - 21*gr1*k1^3*k3^2 + 28*C*gr1*k1^3*k3^2 + 18*beta17*k2^2*k3^2 + 7*gr1*k1*k2^2*k3^2 + 18*f*gr1*k1*k2^2*k3^2 - 28*gr1*k1^2*k3^3 + 7*gr1*k1*k3^4 + 7*beta19*((-9 + 14*C)*k1^4 + 5*k1^2*k3^2)))*Sin[theta] + 3*f*k2^4*(30*b1*beta17*k2^2 + 10*beta17*f*k2^2 + 5*f^2*gr1*k1*k2^2 + 3*f*gr1*k1*((-3 + 4*C)*k1^2 + k3^2))*Sin[theta]^2) - 3*k2*(k1*(k1 - k3)*(35*b1^2*k3*(k1 + k3)*(gr1*K*k1*(k1 - k3) + 2*(beta14 - beta16)*k3) + 3*f*k1^2*(10*beta14*f*(k1 + k3) - 10*beta16*f*(k1 + k3) + 7*gr1*(2*g2*k1^2 + b2*k3^2 - 2*g2*k3^2)) + 7*b1*(6*beta14*f*(k1^3 + k1^2*k3 + k1*k3^2 + k3^3) - 6*beta16*f*(k1^3 + k1^2*k3 + k1*k3^2 + k3^3) + gr1*k1*(3*f*K*k1*(-k1^2 + k3^2) - 5*(2*g2*k1^2*k3 + b2*k3^3 - 2*g2*k3^3)))) + 54*b1*beta18*f*k1^2*k2^3*Cos[theta]*Sin[theta] - 6*(-1 + C)*f^2*gr1*k1^2*k2^4*Cos[theta]^2*Sin[theta]^2 - 3*k2*(7*beta19*C*f*k1^2*(f*k1^2 - b1*k3^2) + C*f*gr1*k1^2*(8*f*k1^3 - 6*f*k1*k3^2 + 7*b1*k3^3) + 7*b1*(beta16*f*k1^2*k2^2 + k3*(f*gr1*k1^4 + b1*beta17*k2^2*k3 + beta14*f*k2^2*k3)))*Sin[2*theta])))\/(k1^2*k2*k3^4)"